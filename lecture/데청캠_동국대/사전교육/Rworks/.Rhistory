3+4
1:10
2+3
(3+6)*8
2^3                # 2의 세제곱을 계산함
14/3
14%%3              # 나머지
log(10)+5          # 로그함수
sqrt(25)           # 제곱근
max(5,3,9)         # 제일 큰 값
min(5,3,9)
PI <- 3.14
R <- 10
R * R * PI
R <- 15
R * R * PI
R <- 20
R * R * PI
x <- c(1,2,3)                  # 숫자형 벡터
y <- c("a","b","c")            # 문자형 벡터
Z <- c(TRUE,TRUE, FALSE, TRUE) # 논리형 벡터
x                      # x 에 저장된 값을 출력하라는 의미
y
x <- c(1,2,3)
z <- c("a","b","c")
v1 <- 50:90
v1
v2 <- c(1,2,5, 50:90)
v2
v3 <- seq(1,101,3)     # 시작,종료,간격
v3
v4 <- seq(0.1,1.0,0.1)     # 시작,종료,간격
v4
v5 <- rep(1,times = 5)     # 1 을 5번 반복
v5
v6 <- rep(1:5,times = 3)
v6
v7 <- rep(c("a","b","c"),each = 3)
v7
v8 <- rep(c("a","b","c"),times = 3)
v8
score <- c(90,85,70)    # 성적
names(score) <- c("John","Tom","Jane")
score                   # 이름과 함께 값이 출력
names(score)[2]
d <- c(1,4,3,7,8)
d[2]           #  벡터에서 두번째 값
d <- c(1,4,3,7,8)
d[1:3]
d
d[1:3]
d[c(1,3,5)]
d[seq(1,5,2)]
d <-  c(1,4,3,7,8,9)
d[-2]
d
d[-c(3:5)]
d <- c(1,4,3,7,8)
d[1:3]           # 처음 세개의 자료 출력
d[c(1,3,5)]
d[seq(1,5,2)]    # 홀수번째 자료 출력
d <- c(1,4,3,7,8,9)
d[-2]           # - 는 ‘제외하고’ 의 의미.
d[-c(3:5)]      # 세번째에서 다섯번째 값은 제외하고
GNP <- c(2090,2450,960) # GNP
names(GNP) <- c("Korea","Japan","Nepal")
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
GNP <- c(2090,2450,960) # GNP
names(GNP) <- c("Korea","Japan","Nepal")
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
d <- c(1,4,3,7,8)
d
2*d
d
d-5
3*d + 4
x <- c(1,2,3)
y <- c(4,5)
c(x,y)          # 단순히 x,y 를 연결하여 출력
z <- c(x,y)     # x,y 를 연결하여 z에 저장
x <- c(1,2,3)
y <- c(4,5,6)
x+y            # 대응하는 원소끼리 + 하여 출력
z <- x + y      # x,y 를 더하여 z에 저장
z
d <- c(1,2,3,4,5,6,7,8,9,10)
d <- c(1,2,3,4,5,6,7,8,9,10)
d
sum(d)
sum(2*d)
length(d)
mean(d[1:5])
max(d)
min(d)
sort(d)                                           # 올림차순 정렬
sort(d, decreasing = FALSE)     # 올림차순 정렬
sort(d, decreasing = TRUE)       # 내림차순 정렬
v1 <- median(d)
v1
v2 <- sum(d)/length(d)
v2
v1 <- c(4,2,3,1,6,10,8,9)
sort(x = v1, decreasing = TRUE)
sort(v1, FALSE)
sort(v1)               # decreasing = FALSE
d <- c(1,2,3,4,5,6,7,8,9)
d>=5       # FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE
d[d>5]     # 6 7 8 9
sum(d>5)   # 5 보다 큰 값의 개수를 출력
sum(d[d>5])# 5 보다 큰 값의 합계를 출력
d==5       # FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
condi <- d > 5 & d < 8   # 조건을 변수에 저장
d[condi]                 # 조건에 맞는 값들을 선택
25+99
25+99
456 - 123
2*(3+4)
(3+5*6)/7
(7 - 4) *3
210 + 35
1256 %% 7
184 %% 5
1976 / 24
16*25 + 186*5 - 67*22
#연습 2
10 * 10 * 3.14
15 * 15 * 3.14
20 * 20 * 3.14
PI <- 3.14
R <- 10
R * R * PI
R <- 15
R * R * PI
R <- 20
R * R * PI
2*6^2 + 5*6 + 10
x <- 6
2*x^2 + 5x + 10
y = 2*x^2 + 5x + 10
x
x^2
2*x^2
2*x^2 +5*x + 10
x <- 8
2*x^2 +5*x + 10
x <- 10
2*x^2 +5*x + 10
# 연습 3
# 101 ~ 200 의 값으로 구성된 벡터 d 를 생성하시오
d <- 101:200
#d 에 어떤 값이 저장되었는지 확인하시오
d
#d 에서 10번째 값은 무엇인가
d[10]
#d 에서 뒤에서 10개의 값을 잘라내어 보이시오
d[:10]
#d 에서 뒤에서 10개의 값을 잘라내어 보이시오
d[-1:90]
#d 에서 뒤에서 10개의 값을 잘라내어 보이시오
d[-c(1:90)]
#d 에서 짝수만 출력하시오
d[1,100,2]
#d 에서 짝수만 출력하시오
d[seq(1,100,2)]
#d 에서 짝수만 출력하시오
d[seq(2,100,2)]
#d 에서 앞에서 20 개의 값을 잘라내어 d.20 에 저장하시오. d.20 의 값을 보이시오
d[:20]
#d 에서 앞에서 20 개의 값을 잘라내어 d.20 에 저장하시오. d.20 의 값을 보이시오
d[0:20]
#d 에서 앞에서 20 개의 값을 잘라내어 d.20 에 저장하시오. d.20 의 값을 보이시오
d.20 <- d[0:20]
d.20
#d.20 에서 5번째 값을 제외한 나머지 값들을 보이시오
d.20[-c(5)]
#d.20 에서 5,7,9 번째 값을 제외한 나머지 값을 보이시오
d.20[-c(5,9,2)]
#d.20 에서 5,7,9 번째 값을 제외한 나머지 값을 보이시오
d.20[-c(seq(5,9,2))]
# 연습 4
d1 <- 1:50
d2 <- 51:100
#d1, d2 의 값을 보이시오
d1
d2
#d1+d2, d2-d1, d1*d2, d2/d1 의 결과를 각각 보이시오
d1+d2
d2-d1
d1*d2
d2/d1
#d1, d2 의 값들의 합(sum)을 각각 보이시오
sum(d1)
sum(d2)
#d1, d2 에 있는 모든 값들의 합(sum)을 보이시오
d3 <- c(d1,d2)
sum(d3)
#d2 에서 가장 큰 값과 가장 작은 값을 보이시오
max(d2)
min(d2)
#d2 와 d1 의 값들의 평균값을 각각 구하고 두 평균의 차이를 보이시오
mean(d2) - mean(d1)
mean(d2)
mean(d1)
#d1 의 값들을 큰수에서 작은 수 순으로 정렬하여 보이시오
sort(d1)
#d1 의 값들을 큰수에서 작은 수 순으로 정렬하여 보이시오
sort(d1, decreasing = FALSE)
#d1 의 값들을 큰수에서 작은 수 순으로 정렬하여 보이시오
sort(d1, decreasing = TRUE)
#d1 과 d2 에서 큰수 순으로 각각 10개씩을 추출하여 d3 에 저장하시오 (결과적으로 d3 에는 20개의 수가 저장)
sort(tt = d1, decreasing = TRUE)
#d1 과 d2 에서 큰수 순으로 각각 10개씩을 추출하여 d3 에 저장하시오 (결과적으로 d3 에는 20개의 수가 저장)
sort(x = d1, decreasing = TRUE)
x
#d1 과 d2 에서 큰수 순으로 각각 10개씩을 추출하여 d3 에 저장하시오 (결과적으로 d3 에는 20개의 수가 저장)
d <- sort(x = d1, decreasing = TRUE)
d
d[1:10]
#d1 과 d2 에서 큰수 순으로 각각 10개씩을 추출하여 d3 에 저장하시오 (결과적으로 d3 에는 20개의 수가 저장)
dt1 <- sort(x = d1, decreasing = TRUE)
dt1[1:10]
dt1 <- dt1[1:10]
#d1 과 d2 에서 큰수 순으로 각각 10개씩을 추출하여 d3 에 저장하시오 (결과적으로 d3 에는 20개의 수가 저장)
d <- sort(x = d1, decreasing = TRUE)
dt1 <- d[1:10]
dt1
t <- sort(x = d2, decreasing = TRUE)
dt2 <- d[1:10]
dt2
#d1 과 d2 에서 큰수 순으로 각각 10개씩을 추출하여 d3 에 저장하시오 (결과적으로 d3 에는 20개의 수가 저장)
d <- sort(x = d1, decreasing = TRUE)
dt1 <- d[1:10]
dt1
t <- sort(x = d2, decreasing = TRUE)
dt2 <- t[1:10]
dt2
d3 <- c(dt1, dt2)
d3
# 연습 5
v1 <- 51:90
v1
#1)  v1 에서  60 보다 작은 수 들을 보이시오
v1<60
#1)  v1 에서  60 보다 작은 수 들을 보이시오
v1[v1<60]
#2)  v1 에서  70 보다 작은 수 들은 몇개인지 보이시오
sum(v1[v1<70])
#2)  v1 에서  70 보다 작은 수 들은 몇개인지 보이시오
sum(v1<70)
#3)  v1 에서  65 보다 큰 수들의 합을 보이시오
sum(v1[v1>65])
#4)  v1 에서  60보다 크고 73 보다 작은 수들을 보이시오
v1[v1>69 & v1<73]
#5)  v1 에서  65 보다 작거나 80 보다 큰 수들을 보이시오
v1[v1>80 & v1<65]
#6)  v1 에서  7로 나눈 나머지가 3 인 숫자들만 보이시오
v1[v1%%7==3]
#7)  v1 에서  짝수들의 합계를 보이시오
sum(v1[v1%%2==0])
#8)  v1 에서  홀수이거나 80 보다 큰 수를 보이시오
condi <- v1%%2==1 | v1>80
v1[condi]
#9)  v1 에서  3과 5의 공배수를 보이시오
condi <- v1%3==0 && v1%5==0
v1[condi]
#9)  v1 에서  3과 5의 공배수를 보이시오
condi <- v1%%3==0 && v1%%5==0
v1[condi]
## Chapter 3 ----------------------------------------------------
z <- matrix(1:20, nrow=4, ncol=5)
z
z2 <- matrix(1:20, nrow=4, ncol=5, byrow=T)
z2
x <- 1:4
x
y <- 5:8
y
m1 <- cbind(x,y) # 열방향 결합
m2 <- rbind(x,y) # 행방향 결합
m1
m2
z[2,3] # 2행 3열에 있는 값
z[1,4] # 1행 4열에 있는 값
z[2,]  # 2행에 있는 모든 값
z[,4]  # 4열에 있는 모든 값
z
rownames(z) # 행의 이름 보이기
colnames(z) # 열의 이름 보이기
rownames(z) <- c("row1","row2","row3","row4")
colnames(z) <- c("col1","col2","col3","col4","col5")
z
z[,"col3"]
z["row2",]
city <- c("Seoul","Tokyo","Washington")
rank <- c(1,3,2)
city.info <- data.frame(city, rank)
city.info
R
iris
is.data.frame(iris) # 객체가 data.frame 인지 확인
iris[,"Species"]           # 결과가 vector ,   iris[,5] 와 동일
iris["Species"]              # 결과가 150x1 data frame
iris$Species                      # 결과가 vector (matrix 에서는 잘안됨)
iris[,c(1:2)]              # 앞의 2개 컬럼 데이터 보기
iris[,c(1,3,5)]            # 1, 3, 5 컬럼 보기
iris[,c("Sepal.Length","Species")]  #Sepal.Length와 Species의 컬럼 보기
iris[1:50,]                # 1~50행의 모든 컬럼 보기
iris[1:50,c(1,3)]          # 1~50행, 1번, 3번 컬럼 보기
dim(iris)    # 행과 열의 수 보이기
nrow(iris)   # 행의 수 보이기
ncol(iris)        # 열의 수 보이기
names(iris)     # 컬럼이름 보이기, colnames() 와 동일
head(iris)        # 데이터셋의 앞부분 일부 보기
tail(iris)        # 데이터셋의 뒷부분 일부 보기
str(iris)           # 데이터셋 요약 보기
unique(iris[,5])    # 종의 종류 보기 (중복 제거)
table(iris[,"Species"]) # 품종의 종류별 instance count
# 5번째 컬럼은 숫자가 아니라 품종 정보이기 때문에 제외
colSums(iris[,-5])      # 열별 합계
colMeans(iris[,-5])     # 열별 평균
rowSums(iris[,-5])      # 행별 합계
rowMeans(iris[,-5])     # 행별 평균
z <- matrix(1:20, nrow=4, ncol=5)
z
t(z)            # 행과열 방향 변환
IR.1 <- subset(iris, Species=="setosa")
IR.1
IR.2 <- subset(iris, Sepal.Length>5.0 &
Sepal.Width>4.0)
IR.2
a <- matrix(1:20,4,5)
b <- matrix(21:40,4,5)
a
b
a+b
b-a
b/a
a*b
3*a
a
b
b-5
2*a + 3*b
a <- a*3
a
b <- b-5
b
# 자료구조의 확인
class(iris)
class(state.x77)
is.matrix(iris)
is.data.frame(iris)
# data frame to matrix
iris.m <- as.matrix(iris[,1:4])
head(iris.m)
class(iris.m)
# matrix to data frame
st <- data.frame(state.x77)
head(st)
class(st
class(st)
# matrix to data frame
st <- data.frame(state.x77)
head(st)
class(st)
setwd("C:/Rwork")  # 파일이 있는 폴더 지정
mydata <- read.csv("test.csv", header = TRUE)
setwd("C:/Rwork")  # 파일이 있는 폴더 지정
setwd("/Rwork")  # 파일이 있는 폴더 지정
setwd("")  # 파일이 있는 폴더 지정
getwd()
setwd("/Users/cash/Desktop/To_FullStack/lecture/데청캠_동국대/사전교육/Rworks")  # 파일이 있는 폴더 지정
mydata <- read.csv("test.csv", header = TRUE)
mydata
head(mydata)         # 앞의 몇줄 데이터만 출력
tail(mydata)         # 뒤의 몇줄 데이터만 출력
mydata[2,3]          # 2행 3열의 원소값 출력
nrow(mydata)                   # 행의 개수 출력
ncol(mydata)         # 열의 개수 출력
dim(mydata)          # 행,열의 개수 출력
myRow1 <- mydata[2,]  # 2행의 값들을 추출하여 벡터생성
myRow2 <- mydata[,3]  # 3열의 값들을 추출하여 벡터생성
mynew <- mydata[,c(2,3)]        # 2,3 열만 추출
write.csv(mynew, "kid_new.csv",
row.names=F, quote=F)
setwd("/Users/cash/Desktop/To_FullStack/lecture/데청캠_동국대/사전교육/Rworks")  # 파일이 있는 폴더 지정
mydata <- read.csv("test.csv", header = TRUE)
mydata
mydata <- read.csv("C:/Rwork/test.csv",
header = TRUE)
mydata <- read.csv("test.csv", header = TRUE)
mydata <- read.csv("test.csv", header = TRUE)
mydata <- read.csv(file.choose(),
header = TRUE)
install.packages("ggplot2")
