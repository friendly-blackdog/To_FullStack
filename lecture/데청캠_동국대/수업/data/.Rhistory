3+4
1:10
2+3
(3+6)*8
2^3                # 2의 세제곱을 계산함
14/3
14%%3              # 나머지
log(10)+5          # 로그함수
sqrt(25)           # 제곱근
max(5,3,9)         # 제일 큰 값
min(5,3,9)
PI <- 3.14
R <- 10
R * R * PI
R <- 15
R * R * PI
R <- 20
R * R * PI
x <- c(1,2,3)                  # 숫자형 벡터
y <- c("a","b","c")            # 문자형 벡터
Z <- c(TRUE,TRUE, FALSE, TRUE) # 논리형 벡터
x                      # x 에 저장된 값을 출력하라는 의미
y
x <- c(1,2,3)
z <- c("a","b","c")
v1 <- 50:90
v1
v2 <- c(1,2,5, 50:90)
v2
v3 <- seq(1,101,3)     # 시작,종료,간격
v3
v4 <- seq(0.1,1.0,0.1)     # 시작,종료,간격
v4
v5 <- rep(1,times = 5)     # 1 을 5번 반복
v5
v6 <- rep(1:5,times = 3)
v6
v7 <- rep(c("a","b","c"),each = 3)
v7
v8 <- rep(c("a","b","c"),times = 3)
v8
score <- c(90,85,70)    # 성적
names(score) <- c("John","Tom","Jane")
score                   # 이름과 함께 값이 출력
names(score)[2]
d <- c(1,4,3,7,8)
d[2]           #  벡터에서 두번째 값
d <- c(1,4,3,7,8)
d[1:3]
d
d[1:3]
d[c(1,3,5)]
d[seq(1,5,2)]
d <-  c(1,4,3,7,8,9)
d[-2]
d
d[-c(3:5)]
d <- c(1,4,3,7,8)
d[1:3]           # 처음 세개의 자료 출력
d[c(1,3,5)]
d[seq(1,5,2)]    # 홀수번째 자료 출력
d <- c(1,4,3,7,8,9)
d[-2]           # - 는 ‘제외하고’ 의 의미.
d[-c(3:5)]      # 세번째에서 다섯번째 값은 제외하고
GNP <- c(2090,2450,960) # GNP
names(GNP) <- c("Korea","Japan","Nepal")
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
exam
library(readxl)
library(readxl)
setwd("~/Desktop/To_FullStack/lecture/데청캠_동국대/수업/data")
exam <- read.csv('csv_exam.csv')
exam %>% select(math)
exam
exam %>% select(-math)
library(dplyr)
exam %>% select(-math)
exam %>%s select(class, math, english)
exam %>% select(class, math, english)
exam %>%
filter(class == 1) %>%
select(english)
mpg
mpg <- as.dadta.frame(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
#연습----------------------------
class_new <- mpg %>% select(class, cty)
class_new
mpg_suv <- class_new %>% filter(class == 'suv')
mpg_suv <- class_new %>% filter(class== 'compact')
mean(mpg_suv$cty)
mean(mpg_compact$cty)
mpg_suv <- class_new %>% filter(class == 'suv')
mpg_compact <- class_new %>% filter(class== 'compact')
mean(mpg_suv$cty)
mean(mpg_compact$cty)
#compact
qplot(mean(mpg_suv$cty))
#compact
table(mean(mpg_suv$cty))
#compact
table((mean(mpg_suv$cty),mean(mpg_compact$cty)))
qplot(midwest$asia_group)
exam <- read.csv('csv_exam.csv')
qplot
head(class_new)
head(exam)
sort(exam)
exam %>% arrange(math)
exam %>% arrange(desc(math)) # math 오름차순 정렬
exam %>%  arrange(class, math)
#---------------------------------연습----------------------------
mpg_audi <- mpg %>% filter(manufacturer == 'audi')
mpg_audi
mpg %>% arrange('audi')
mpg_a <- mpg %>% arrange('audi')
head(mpg_a)
mpg_a <- mpg %>% arrange('audi', hwy)
head(mpg_a)
#---------------------------------연습----------------------------
mpg_audi <- mpg %>% filter(manufacturer == 'audi')
mpg_a <- mpg %>% arrange('a, hwy)
head(mpg_a)
mpg_a <- mpg %>% arrange('a, hwy)
head(mpg_a)
#---------------------------------연습----------------------------
mpg_audi <- mpg %>% filter(manufacturer == 'audi')
mpg_a <- mpg %>% arrange('audi', hwy)
head(mpg_a)
#---------------------------------연습----------------------------
mpg_audi <- mpg %>% filter(manufacturer == 'audi')
mpg_a <- mpg %>% arrange(mpg_audi, hwy)
#---------------------------------연습----------------------------
audi <- mpg %>% select(manufactuerer == 'audi')
#---------------------------------연습----------------------------
audi <- mpg %>% select(manufacturer == 'audi')
#---------------------------------연습----------------------------
audi <- mpg %>% select(manufacturer == 'audi')
#---------------------------------연습----------------------------
audi <- mpg %>% filter(manufacturer == 'audi')
#---------------------------------연습----------------------------
mpg %>%
filter(manufacturer == 'audi') %>%
arrange(desc(hwy)) %>%
head(5)
exam
exam %>%
mutate(total = math + english + science) %>%
head
exam %>%
mutate(total = math + english + science,
mean = (math + english + science)/3) %>%
head
#--------------------------연습----------------------------
mpg_copy <- mpg
mpg_copy %>%
mutate(합산 = cty + hwy)
head(mpg_copy)
mpg_copy %>%
mutate(total = cty + hwy)
head(mpg_copy)
#--------------------------연습----------------------------
mpg_copy <- mpg
mpg_copy
mpg_copy %>%
mutate(total = cty + hwy)
head(mpg_copy)
mpg_copy %>%
mutate('avg' = total/2)
#--------------------------연습----------------------------
mpg_total <- mpg %>% mutate(total = cty + hwy)
head(mpg_total)
mpg_total <- mpg %>% mutate(total = cty+hwy, mean = total/2)
head(mpg_total)
mpg_total %>% arrange(desc(mean)) %>% head(3)
mpg %>% mutate(total = cty + hwy, mean = total/2) %>%
arrange(desc(mean)) %>%
head(3)
exam %>% summarise(mean_math = mean(math))
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math))
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n = n())
mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty))
cty_avge <- mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty))
mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty))
arrnage(cty_avg)
cty_avg <- mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty))
cty_avg <- mpg %>%
group_by(class) %>%
summarise(mean(cty))
mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty))
arrange(cty_avg)
arrange(desc(cty_avg))
arrange(desc(cty_avg$`mean(cty)`))
arrange(desc(cty_avg$mean(cty)))
arrange(mean(cty))
mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty))
cty_avg %>% arrange(mean(cty))
arrange(cty_avg)
arrange(desc(cty_avg))
arrange(desc(cty_avg$`mean(cty)`))
mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc())
mpg %>%
group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(mean(cty)))
arrange(desc(meancty))
mpg %>%
group_by(class) %>%                  # class별 분리
summarise(mean_cty = mean(cty)) %>%  # cty 평균 구하기
arrange(desc(mean_cty))              # 내림차순 정렬하기
arrange(desc(meancty))
arrange(desc(mean_cty))
mpg %>%
group_by(class) %>%                  # class별 분리
summarise(mean_cty = mean(cty)) %>%  # cty 평균 구하기
arrange(desc(mean_cty))              # 내림차순 정렬하기
arrange(desc(mean_cty))
mpg %>%
group_by(class) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty))
mpg %>%
gropu_by(class) %>%
summrarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
mpg %>%
group_by(class) %>%
summrarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
mpg %>%
group_by(class) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
mpg %>% filter('compact')
comp <- mpg %>% filter('compact')
comp <- mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
comp <- mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
comp
comp <- mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
comp
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
mpg %>%
filter(class == "compact") %>%  # compact 추출
group_by(manufacturer) %>%      # manufacturer별 분리
summarise(count = n()) %>%      # 빈도 구하기
arrange(desc(count))            # 내림차순 정렬
mpg %>%
filter(class == "compact") %>%  # compact 추출
group_by(manufacturer) %>%      # manufacturer별 분리
summarise(count = n()) %>%      # 빈도 구하기
arrange(desc(count))            # 내림차순 정렬
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
mpg %>%
filter(class == "compact") %>%  # compact 추출
group_by(manufacturer) %>%      # manufacturer별 분리
summarise(count = n()) %>%      # 빈도 구하기
arrange(desc(count))            # 내림차순 정렬
mpg %>%
filter(class == 'compact') %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count)) %>%
mpg %>%
filter(class == "compact") %>%  # compact 추출
group_by(manufacturer) %>%      # manufacturer별 분리
summarise(count = n()) %>%      # 빈도 구하기
arrange(desc(count))            # 내림차순 정렬
mpg %>%
filter(class == "compact") %>%
group_by(manufacturer) %>%
summarise(count=n()) %>%
arrange(desc(count))
mpg %>% group_by(class) %>%
summarise(mean(cty))
mpg %>%
group_by(class) %>%
summarise(mean(cty)) %>%
arrange(desc(mean(cty)))
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(cty)) %>%
arrange(desc(cty_mean))
test1 <- data.frame(id = c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
test2 <- data.frame(id = c(1,2,3,4,5),
final1 = c(70,83,65,95,80))
total <- left_join(test1, test2, by = 'id')
total
name <- data.frame(class = c(1,2,3,4,5),
teacher = c("김","이","박","최","정"))
exam_new <- left_join(exam, name, by= 'class')
exam_new
group_a <- data.frame(id = c(1,2,3,4,5),
test = c(60,80,70,90,85))
group_b <- data.frame(id = c(6,7,8,9,10),
test = c(70,83,65,95,80))
group_all <- bind_rows(Groupd_a, group_b)
group_all <- bind_rows(group_a, group_b)
group_all
#------------------연습------------------------
head(mpg,3)
price = c(2.35,2.38,2.11,2.76,2.22)
fl_data <- data.frame(fl = c('c','d','e','p','r'),
type = c('CNG', 'diesel', 'ethanol E85','premium','regular'),
price = c(2.35,2.38,2.11,2.76,2.22))
mpg_new <- left_join(mpg, fl_data, by = fl)
mpg_new <- left_join(mpg, fl_data, by = fuel)
price_fl <- data.frame(fl = c('c','d','e','p','r'),
type = c('CNG', 'diesel', 'ethanol E85','premium','regular'),
price = c(2.35,2.38,2.11,2.76,2.22))
mpg_new <- left_join(mpg, price_fl, by = fuel)
head(mpg_new, 3)
head(mpg, 3)
mpg_new <- left_join(mpg, price_fl, by = "fl")
mpg_new
head(mpg_new,3)
mpg_new %>%
select(model, fl, price_fl) %>%
head(5)
mpg_new %>%
select(model)
mpg_new %>%
select(model) %>%
head(5)
mpg_new %>%
select(fl) %>%
head(5)
mpg_new %>%
select(price_fl) %>%
head(5)
mpg_new <- left_join(mpg, fuel, by = "fl")
mpg_new %>%
select(model, fl, price_fl)%>%
head(5)
fuel <- data.frame(fl = c("c", "d", "e", "p", "r"),
type = c('CNG', 'diesel', 'ethanol E85','premium','regular'),
price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22))
fuel
mpg <- left_join(mpg,fuel,by="f1")
mpg <- left_join(mpg,fuel,by="fl")
head(midwest, 3)
midwest
midiwest <- as.data.frame(ggplot2::midwest)
midwest <- as.data.frame(ggplot2::midwest)
popunder <- (poptotal - popadults)*100
popunder <- (midwest$poptotal - midwest$popadults)*100
popunder
popunder <- (midwest$poptotal - midwest$popadults)
popunder
popunder <- (midwest$poptotal - midwest$popadults)/midwest$poptotal
popunder
popunder <- ((midwest$poptotal - midwest$popadults)/midwest$poptotal)*100
popunder
head(popunder,3)
midwest_new <- midwest %>%
mutate(ratio_under = (poptotal-popadults)/poptotal *100)
str(midwest_new)
midwest_new %>%
select(county, ratio_under) %>%
arrange(desc(ratio_under)) %>%
head(5)
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large"),
ifelse(ratio_under >= 30, "middle", "small"))
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by = grade %>%
summarise(count=n())
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by = (grade) %>%
summarise(count=n())
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small")))
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by = (grade) %>%
summarise(count=n())
midwest_new %>%
mutate(ratio_asian = (popasian/poptotal)*100) %>%
select(state, county, ratio_asian) %>%
arrange(ratio_asian) %>%
head(4)
midwest_new %>%
mutate(ratio_asian = (popasian/poptotal)*100) %>%
select(state, county, ratio_asian) %>%
arrange(ratio_asian) %>%
head(10)
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by = (grade) %>%
summarise(count=n())
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by(grade) %>%
summarise(count=n())
midwest_new %>%
mutate(level = ifelse(ratio_child >= 40, "large",
ifelse(ratio_child >= 30, "middle", "small"))) %>%
group_by(level) %>%
summarise(count = n())
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by(grade) %>%
summarise(count=n())
midwest_new %>%
mutate(level = ifelse(ratio_child >= 40, "large",
ifelse(ratio_child >= 30, "middle", "small"))) %>%
group_by(level) %>%
summarise(count = n())
midwest <- as.data.frame(ggplot2::midwest)
popunder <- ((midwest$poptotal - midwest$popadults)/midwest$poptotal)*100
popunder
midwest_new <- midwest %>%
mutate(ratio_under = (poptotal-popadults)/poptotal *100)
str(midwest_new)
midwest_new %>%
select(county, ratio_under) %>%
arrange(desc(ratio_under)) %>%
head(5)
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))), %>%
group_by(grade) %>%
summarise(count=n())
midwest_new %>%
mutate(ratio_asian = (popasian/poptotal)*100) %>%
select(state, county, ratio_asian) %>%
arrange(ratio_asian) %>%
head(10)
midwest_new %>%
mutate(level = ifelse(ratio_child >= 40, "large",
ifelse(ratio_child >= 30, "middle", "small"))) %>%
group_by(level) %>%
summarise(count = n())
midwest_new %>%
mutate(level = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))) %>%
group_by(level) %>%
summarise(count = n())
midwest_new %>%
mutate(grade = ifelse(ratio_under >= 40, "large",
ifelse(ratio_under >= 30, "middle", "small"))) %>%
group_by(grade) %>%
summarise(count=n())
