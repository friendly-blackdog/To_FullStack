3+4
1:10
2+3
(3+6)*8
2^3                # 2의 세제곱을 계산함
14/3
14%%3              # 나머지
log(10)+5          # 로그함수
sqrt(25)           # 제곱근
max(5,3,9)         # 제일 큰 값
min(5,3,9)
PI <- 3.14
R <- 10
R * R * PI
R <- 15
R * R * PI
R <- 20
R * R * PI
x <- c(1,2,3)                  # 숫자형 벡터
y <- c("a","b","c")            # 문자형 벡터
Z <- c(TRUE,TRUE, FALSE, TRUE) # 논리형 벡터
x                      # x 에 저장된 값을 출력하라는 의미
y
x <- c(1,2,3)
z <- c("a","b","c")
v1 <- 50:90
v1
v2 <- c(1,2,5, 50:90)
v2
v3 <- seq(1,101,3)     # 시작,종료,간격
v3
v4 <- seq(0.1,1.0,0.1)     # 시작,종료,간격
v4
v5 <- rep(1,times = 5)     # 1 을 5번 반복
v5
v6 <- rep(1:5,times = 3)
v6
v7 <- rep(c("a","b","c"),each = 3)
v7
v8 <- rep(c("a","b","c"),times = 3)
v8
score <- c(90,85,70)    # 성적
names(score) <- c("John","Tom","Jane")
score                   # 이름과 함께 값이 출력
names(score)[2]
d <- c(1,4,3,7,8)
d[2]           #  벡터에서 두번째 값
d <- c(1,4,3,7,8)
d[1:3]
d
d[1:3]
d[c(1,3,5)]
d[seq(1,5,2)]
d <-  c(1,4,3,7,8,9)
d[-2]
d
d[-c(3:5)]
d <- c(1,4,3,7,8)
d[1:3]           # 처음 세개의 자료 출력
d[c(1,3,5)]
d[seq(1,5,2)]    # 홀수번째 자료 출력
d <- c(1,4,3,7,8,9)
d[-2]           # - 는 ‘제외하고’ 의 의미.
d[-c(3:5)]      # 세번째에서 다섯번째 값은 제외하고
GNP <- c(2090,2450,960) # GNP
names(GNP) <- c("Korea","Japan","Nepal")
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
library(ggplot2)
x <- c("a", "a", 'b', 'c')
x <- c("a", "a", 'b', 'c')
x
gplot(x)
qplot(x)
# data에 mpg, x축에 hwy 변수 지정하여 그래프 생성
qplot(data = mpg, x = hwy)
# x축 cty
qplot(data = mpg, x = cty)
# x축 drv, y축 hwy
qplot(data = mpg, x = drv, y = hwy)
# x축 drv, y축 hwy, 선 그래프 형태
qplot(data = mpg, x = drv, y = hwy, geom = "line")
# x축 drv, y축 hwy, 상자 그림 형태
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot")
# x축 drv, y축 hwy, 상자 그림 형태, drv별 색 표현
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot", colour = drv)
city <- c("Seoul","Tokyo","Washington")
rank <- c(1,3,2)
city.info <- data.frame(city, rank)
city.info
student.info <- data.frame(student,score)
####연습
student <- c('a', 'b', 'c', 'd', 'e')
score <- c(80, 60, 70, 50, 90)
student.info <- data.frame(student,score)
student.info
#전체 평균 점수 구하기
mean(score)
# 전체 평균 변수 만들고 출력하기
avg <- mean(score)
avg
####연습
#출력
score2 <- c(80, 60, 70, 50, 90)
score2
english <- c(90, 80, 60, 70) # 영어 점수 변수 생성
english
math <- c(50, 60, 100, 20) # 수학 점수 변수 생성
math
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
class <- c(1,1,2,2)
class
df_midterm <- data.frame(english, math, class)
df_midterm
mean(df_midterm$english) # df_midterm의 english로 평균 산출
mean(df_midterm$math) # df_midterm의 math로 평균 산술
df_midterm <- data.frame(english = c(90, 80, 60, 70), math = c(50,60,100,20), class=c(1,1,2,2))
df_midterm
##실습-------------------
product <- data.frame(fruit = c('apple', 'straw', 'waterme'), price = c(1800, 1500, 3000), sold=c(24, 38,13))
product
##실습-------------------
product <- data.frame(fruit = c('apple', 'straw', 'waterme'), price = c(1800, 1500, 3000), sale=c(24, 38,13))
product
mean(product$fruit)
mean(product$price)
mean(product$sale)
# readxl 패키지 설치
install.packages("readxl")
# readxl 패키지 로드
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")
setwd( system.getCurrentDirectory() )
df_exam <- read_excel("/Users/cash/Desktop/To_FullStack/lecture/데청캠_동국대/수업/02/excel_exam.xlsx")
df_exam
setwd(system.getCurrentDirectory())
setwd("~/Desktop/To_FullStack/lecture/데청캠_동국대/수업/02")
df_exam <- read_excel("excel_exam.xlsx")
df_exam
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("excel_exam_novar.xlsx", col_names = F)
df_exam_novar <- read_excel("excel_exam_novar.xlsx", col_names = F)
setwd("~/Desktop/To_FullStack/lecture/데청캠_동국대/수업/02/data")
df_exam_novar <- read_excel("excel_exam_novar.xlsx", col_names = F)
df_exam_novar
